{"remainingRequest":"C:\\thesis\\toxic-comments-moderation\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\thesis\\toxic-comments-moderation\\node_modules\\magpie-base\\src\\components\\inputs\\SliderInput.vue?vue&type=style&index=0&id=70d9a610&scoped=true&lang=css&","dependencies":[{"path":"C:\\thesis\\toxic-comments-moderation\\node_modules\\magpie-base\\src\\components\\inputs\\SliderInput.vue","mtime":1656594654905},{"path":"C:\\thesis\\toxic-comments-moderation\\node_modules\\css-loader\\dist\\cjs.js","mtime":1651676242449},{"path":"C:\\thesis\\toxic-comments-moderation\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1651676244489},{"path":"C:\\thesis\\toxic-comments-moderation\\node_modules\\postcss-loader\\src\\index.js","mtime":1651676243373},{"path":"C:\\thesis\\toxic-comments-moderation\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1651676241754},{"path":"C:\\thesis\\toxic-comments-moderation\\node_modules\\vue-loader\\lib\\index.js","mtime":1651676243816}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouc2xpZGVyLWVsZW1lbnQgewogIGRpc3BsYXk6IGZsZXg7CiAgbWFyZ2luOiAyMHB4IDA7Cn0KCi5zbGlkZXItZWxlbWVudCAubGVmdCwKLnNsaWRlci1lbGVtZW50IC5yaWdodCB7CiAgZmxleC1ncm93OiAwOwogIHBhZGRpbmc6IDAgMjBweDsKfQoKLnNsaWRlciB7CiAgZmxleC1ncm93OiAxOwp9Cg=="},{"version":3,"sources":["SliderInput.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"SliderInput.vue","sourceRoot":"node_modules/magpie-base/src/components/inputs","sourcesContent":["<docs>\n```vue\n<Experiment>\n    <Screen>\n\n      <Slide>\n        <p>Fries or soup?</p>\n        <SliderInput\n            left=\"Fries\"\n            right=\"Soup\"\n            :response.sync= \"$magpie.measurements.lunch\" />\n        Lunch: {{$magpie.measurements.lunch}}% Soup\n        <button @click=\"$magpie.saveAndNextScreen();\">Submit</button>\n      </Slide>\n\n    </Screen>\n\n</Experiment>\n```\n</docs>\n\n<template>\n  <div class=\"slider\">\n    <div class=\"slider-element\">\n      <div class=\"left\">{{ left }}</div>\n      <Slider\n        v-model=\"value\"\n        class=\"slider\"\n        :tooltip=\"tooltip ? 'always' : 'none'\"\n        :min=\"min\"\n        :max=\"max\"\n        :interval=\"interval\"\n        :disabled=\"disabled\"\n      />\n      <div class=\"right\">{{ right }}</div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Slider from 'vue-slider-component';\nimport 'vue-slider-component/theme/default.css';\n\nexport default {\n  /**\n   * Have your participants answer on a continuous slider scale\n   */\n  name: 'SliderInput',\n  components: { Slider },\n  props: {\n    /**\n     * Text left of the slider\n     */\n    left: {\n      type: String,\n      optional: true,\n      default: ''\n    },\n    /**\n     * Text right of the slider\n     */\n    right: {\n      type: String,\n      optional: true,\n      default: ''\n    },\n    /**\n     * Initial slider position\n     */\n    initial: {\n      type: Number,\n      optional: true,\n      default: 0\n    },\n    /**\n     * Minimal slider value\n     */\n    min: {\n      type: Number,\n      optional: true,\n      default: 0\n    },\n    /**\n     * Maximum slider value\n     */\n    max: {\n      type: Number,\n      optional: true,\n      default: 100\n    },\n    /**\n     * Interval between slider values\n     */\n    interval: {\n      type: Number,\n      optional: true,\n      default: 1\n    },\n    /**\n     * Whether to show the tooltip\n     */\n    tooltip: {\n      type: Boolean,\n      optional: true,\n      default: false\n    },\n    /**\n     * Whether to show the tooltip\n     */\n    disabled: {\n      type: Boolean,\n      optional: true,\n      default: false\n    }\n  },\n  data() {\n    return {\n      value: this.initial\n    };\n  },\n  watch: {\n    value() {\n      if (!this.disabled) {\n        this.$emit('update:response', this.value);\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n.slider-element {\n  display: flex;\n  margin: 20px 0;\n}\n\n.slider-element .left,\n.slider-element .right {\n  flex-grow: 0;\n  padding: 0 20px;\n}\n\n.slider {\n  flex-grow: 1;\n}\n</style>\n"]}]}