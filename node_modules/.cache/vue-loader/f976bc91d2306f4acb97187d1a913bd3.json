{"remainingRequest":"C:\\thesis\\magpie-exp\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\thesis\\magpie-exp\\src\\App.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\thesis\\magpie-exp\\src\\App.vue","mtime":1656509466105},{"path":"C:\\thesis\\magpie-exp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1651676241754},{"path":"C:\\thesis\\magpie-exp\\node_modules\\vue-loader\\lib\\index.js","mtime":1651676243816}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KDQovLyBMb2FkIGRhdGEgZnJvbSBjc3YgZmlsZXMgYXMgamF2YXNjcmlwdCBhcnJheXMgd2l0aCBvYmplY3RzDQppbXBvcnQgcHJhY3RpY2UgZnJvbSAnLi4vdHJpYWxzL3ByYWN0aWNlLmNzdic7DQppbXBvcnQgdHJpYWxzIGZyb20gJy4uL3RyaWFscy90cmlhbHMuY3N2JzsNCmltcG9ydCBUcmlhbFNjcmVlbiBmcm9tICcuL1RyaWFsU2NyZWVuLnZ1ZSc7DQppbXBvcnQgXyBmcm9tICdsb2Rhc2gnOw0KDQpleHBvcnQgZGVmYXVsdCB7DQogIG5hbWU6ICdBcHAnLA0KICBjb21wb25lbnRzOiB7VHJpYWxTY3JlZW59LA0KICBkYXRhKCkgew0KICAgIHJldHVybiB7DQogICAgICBwcmFjdGljZSwNCiAgICAgIHRyaWFscywNCiAgICAgIC8vIEV4cG9zZSBsb2Rhc2gucmFuZ2UgdG8gdGVtcGxhdGUgYWJvdmUNCiAgICAgIHJhbmdlOiBfLnJhbmdlDQogICAgfTsNCiAgfSwNCiAgbWV0aG9kczogew0KICAgIHByZXBhcmVEYXRhOiBmdW5jdGlvbigpew0KICAgICAgLy8gY29uc29sZS5sb2coInZhcmlhbnQ6ICIsIHRoaXMuJG1hZ3BpZS5zb2NrZXQudmFyaWFudCkNCiAgICAgIC8vIGNvbnNvbGUubG9nKCJjaGFpbjogIiwgdGhpcy4kbWFncGllLnNvY2tldC5jaGFpbikNCiAgICAgIC8vIGNvbnNvbGUubG9nKCJnZW5lcmF0aW9uOiAiLCB0aGlzLiRtYWdwaWUuc29ja2V0LmdlbmVyYXRpb24pDQogICAgICB2YXIgdmFyaWFudCA9IHRoaXMuJG1hZ3BpZS5zb2NrZXQudmFyaWFudA0KICAgICAgdGhpcy50cmlhbHMgPSBfLnNodWZmbGUoXy5maWx0ZXIodGhpcy50cmlhbHMsIHsndmFyaWFudCcgOiB2YXJpYW50fSkpDQogICAgfSwNCiAgICBnZXRQcmV2aW91c1Jlc3BvbnNlOiBmdW5jdGlvbihpdGVtKXsNCg0KICAgICAgLy8gd2hpY2ggZ2VuZXJhdGlvbiBpcyB0aGlzDQogICAgICB2YXIgZ2VuZXJhdGlvbiA9IHRoaXMuJG1hZ3BpZS5zb2NrZXQuZ2VuZXJhdGlvbjsNCg0KICAgICAgLy8gaWYgd2UgYXJlIGluIHRoZSBmaXJzdCBnZW5lcmF0aW9uLCB3ZSB3aWxsIHJldHVybiB0aGUgZGVmYXVsdEd1ZXNzIGZvciB0aGUgaXRlbQ0KICAgICAgaWYgKGdlbmVyYXRpb24gPT0gMSkgew0KICAgICAgICB2YXIgY3VycnJlbnRJdGVtRGF0YSA9IF8uZmlsdGVyKHRoaXMudHJpYWxzLCB7J2l0ZW0nIDogaXRlbX0pDQogICAgICAgIHJldHVybiggY3VycnJlbnRJdGVtRGF0YVswXS5kZWZhdWx0R3Vlc3MgKQ0KICAgICAgfQ0KDQogICAgICAvLyBnZXQgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHJlc3VsdHMgZnJvbSB0aGUgbGFzdCBpdGVyYXRpb24gZnJvbSB0aGUgc29ja2V0DQogICAgICB2YXIgbGFzdEl0ZXJhdGlvblJlc3VsdHMgPSB0aGlzLiRtYWdwaWUuc29ja2V0Lmxhc3RJdGVyYXRpb25SZXN1bHRzOw0KDQogICAgICAvLyBiZWZvcmUgaW5pdGlhbGl6YXRpb24gd2l0aCBDb25uZWN0SW50ZXJhY3RpdmVTY3JlZW4sIGxhc3RJdGVyYXRpb25SZXN1bHRzIHdpbGwgYmUgJ251bGwnDQogICAgICAvLyBzbyB3ZSBtYWtlIHN1cmUgdGhhdCB0aGVyZSBpcyBzb21lIG91dHB1dA0KICAgICAgLy8gaWYgd2UgYXJlIG5laXRoZXIgZmlyc3QtZ2VuZXJhdGlvbiBpbiB0aGUgY2hhaW4sIG5vciBoYXZlIGFuIGVtcHR5IHNvY2tldCwNCiAgICAgIC8vIHdlIGNhbiByZXR1cm4gdGhlIHByZXZpb3VzIGlucHV0IGZvciB0aGUgY3VycmVudCBpdGVtDQoNCiAgICAgIHZhciBmaWx0ZXJlZERhdGEgPSBfLmZpbHRlcihsYXN0SXRlcmF0aW9uUmVzdWx0cywgWydpdGVtJywgaXRlbV0pDQogICAgICB2YXIgZXh0cmFjdGVkUm93ID0gZmlsdGVyZWREYXRhWzBdDQogICAgICByZXR1cm4gKGV4dHJhY3RlZFJvdyA9PSBudWxsID8gbnVsbCA6IGV4dHJhY3RlZFJvdy5ndWVzcykNCiAgICB9DQogIH0NCn07DQoNCg=="},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0JA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\r\n  <Experiment title=\"magpie3-iterated-guessing\">\r\n    <InstructionScreen :title=\"'Welcome'\">\r\n      In this experiment you will be asked to guess quantities of everyday events or acts.\r\n      This can sometimes be difficult.\r\n      This is why each trial shows the answer of the previous participant in this experiment for the same question.\r\n      You can use this value for orientation, but you should give your own best guess.\r\n    </InstructionScreen>\r\n\r\n\r\n    <Screen :title=\"'Practice'\">\r\n\t\t\tReady to start the experiment.\r\n\t\t\t<br>\r\n\t\t\t<br>\r\n\t\t\tWhen you are ready, click the button to start your test session.\r\n\t\t\t<button @click=\"$magpie.nextScreen();\">\r\n\t\t\t\tNext\r\n\t\t\t</button>\r\n\t\t</Screen>\r\n\r\n    <!-- *~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*  Training  *~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~* -->\r\n\r\n    <!-- Practice trials -->\r\n    <template v-for=\"(trial, i) of practice\">\r\n      <!-- Provide the plain text for the participant to read before the task -->\r\n      <Screen :key=\"'training-' + i\" :progress=i/trials.length>\r\n        <div class=\"stimulus\">\r\n          <div class=\"text\">\r\n            <p>\r\n              \"{{trial.text}}\"\"\r\n            </p>\r\n          </div>\r\n        \r\n          <div class=\"score\">\r\n            <p> </p>\r\n          </div>\r\n        </div>\r\n      <button @click=\"$magpie.nextScreen()\">I have read the text</button> \r\n      </Screen>\r\n      \r\n      <!-- Comprehension question is provided with a higher probability than in the experiment phase -->\r\n      <ForcedChoiceScreen \r\n      v-if=\"Math.random() < 0.7\"\r\n      :options=\"['Yes', 'No']\" \r\n      :key=\"'training-' + i\"\r\n      :progress=20>\r\n        <template #stimulus>\r\n          <div class=\"stimulus\">\r\n            <p>\r\n            \"Comprehension question\"\r\n            </p>\r\n          </div>\r\n        </template>\r\n      </ForcedChoiceScreen>\r\n\r\n      <!-- The task, where the participant can make a decision  -->\r\n      <TrialScreen\r\n        :trial=\"trial\"\r\n        :key=\"'training-' + i\"\r\n        :trialType=\"'training'\"\r\n        :trial-number=\"i\"\r\n        :progress=\"i/trials.length\"\r\n      />\r\n    </template>\r\n\r\n\r\n    <!-- *~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*  Experiment  *~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~*~~~* -->\r\n\r\n    <!-- The experiment phase  -->\r\n    <Screen :title=\"'Experiment'\">\r\n\t\t\tThe experiment starts now\r\n\t\t\t<br>\r\n\t\t\t<br>\r\n\t\t\tWhen you are ready, click the button to start your session.\r\n\t\t\t<button @click=\"$magpie.nextScreen();\">\r\n\t\t\t\tNext\r\n\t\t\t</button>\r\n\t\t</Screen>\r\n\r\n  <!-- Trials -->\r\n    <template v-for=\"(trial, i) of trials\">\r\n      <!-- Provide the plain text for the participant to read before the task -->\r\n      <Screen :key=\"'experiment-' + i\" :progress=i/trials.length>\r\n        <div class=\"stimulus\">\r\n          <div class=\"text\">\r\n            <p>\r\n              \"{{trial.text}}\"\"\r\n            </p>\r\n          </div>\r\n        \r\n          <div class=\"score\">\r\n            <p> </p>\r\n          </div>\r\n        </div>\r\n      <button @click=\"$magpie.nextScreen()\">I have read the text</button> \r\n      </Screen>\r\n      \r\n      <!-- Comprehension question is provided with a higher probability than in the experiment phase -->\r\n      <ForcedChoiceScreen \r\n      v-if=\"Math.random() < 0.2\"\r\n      :options=\"['Yes', 'No']\" \r\n      :key=\"'experiment-' + i\"\r\n      :progress=i/trials.length>\r\n        <template #stimulus>\r\n          <div class=\"stimulus\">\r\n            <p>\r\n            \"Comprehension question\"\r\n            </p>\r\n          </div>\r\n        </template>\r\n      </ForcedChoiceScreen>\r\n\r\n      <!-- The task, where the participant can make a decision  -->\r\n      <TrialScreen\r\n        :trial=\"trial\"\r\n        :key=\"'experiment-' + i\"\r\n        :trial-type=\"'experiment'\"\r\n        :trial-number=\"i\"\r\n        :progress=\"i/trials.length\"\r\n      />\r\n    </template>\r\n\r\n\r\n\r\n    <!-- <template v-for=\"(trial, i) of trials\">\r\n      <Screen :key=\"i\">\r\n         <p> <strong>{{trial.text}}</strong></p>\r\n         <button @click=\"$magpie.nextScreen();\">I have read the text</button> \r\n      </Screen>\r\n      <ForcedChoiceScreen\r\n        :key=\"i\"\r\n        :options=\"['Approve', 'Reject']\"\r\n        question=\"Moderate this comment.\"\r\n        :feedbackTime=\"1000\">\r\n          <template #stimulus>\r\n            <p> <strong>{{trial.text}}</strong></p>\r\n            <p> <strong>{{trial.correctResponse}}</strong></p>\r\n\r\n          </template>\r\n          <template #feedback>\r\n            <p v-if=\"$magpie.measurements.response === trial.correctResponse\">Correct</p>\r\n            <p v-else>Incorrect</p>\r\n          </template>\r\n      </ForcedChoiceScreen>\r\n\r\n      </template> -->\r\n\r\n    <PostTestScreen />\r\n\r\n    <SubmitResultsScreen />\r\n  </Experiment>\r\n</template>\r\n\r\n<script>\r\n// Load data from csv files as javascript arrays with objects\r\nimport practice from '../trials/practice.csv';\r\nimport trials from '../trials/trials.csv';\r\nimport TrialScreen from './TrialScreen.vue';\r\nimport _ from 'lodash';\r\n\r\nexport default {\r\n  name: 'App',\r\n  components: {TrialScreen},\r\n  data() {\r\n    return {\r\n      practice,\r\n      trials,\r\n      // Expose lodash.range to template above\r\n      range: _.range\r\n    };\r\n  },\r\n  methods: {\r\n    prepareData: function(){\r\n      // console.log(\"variant: \", this.$magpie.socket.variant)\r\n      // console.log(\"chain: \", this.$magpie.socket.chain)\r\n      // console.log(\"generation: \", this.$magpie.socket.generation)\r\n      var variant = this.$magpie.socket.variant\r\n      this.trials = _.shuffle(_.filter(this.trials, {'variant' : variant}))\r\n    },\r\n    getPreviousResponse: function(item){\r\n\r\n      // which generation is this\r\n      var generation = this.$magpie.socket.generation;\r\n\r\n      // if we are in the first generation, we will return the defaultGuess for the item\r\n      if (generation == 1) {\r\n        var currrentItemData = _.filter(this.trials, {'item' : item})\r\n        return( currrentItemData[0].defaultGuess )\r\n      }\r\n\r\n      // get information about the results from the last iteration from the socket\r\n      var lastIterationResults = this.$magpie.socket.lastIterationResults;\r\n\r\n      // before initialization with ConnectInteractiveScreen, lastIterationResults will be 'null'\r\n      // so we make sure that there is some output\r\n      // if we are neither first-generation in the chain, nor have an empty socket,\r\n      // we can return the previous input for the current item\r\n\r\n      var filteredData = _.filter(lastIterationResults, ['item', item])\r\n      var extractedRow = filteredData[0]\r\n      return (extractedRow == null ? null : extractedRow.guess)\r\n    }\r\n  }\r\n};\r\n\r\n</script>\r\n<style>\r\n/* @font-face {\r\n  font-family: \"OpenSans\";\r\n  src: local(\"OpenSans\"),\r\n   url(./fonts/OpenSans-Regular.ttf) format(\"truetype\");\r\n}  */\r\n\r\n@import url(https://fonts.googleapis.com/css2?family=Open+Sans);\r\n\r\n</style>"]}]}