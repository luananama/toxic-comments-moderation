{"remainingRequest":"C:\\thesis\\magpie-exp\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\thesis\\magpie-exp\\node_modules\\magpie-base\\src\\components\\screens\\EyetrackingCalibrationScreen.vue?vue&type=style&index=0&id=c332567a&scoped=true&lang=css&","dependencies":[{"path":"C:\\thesis\\magpie-exp\\node_modules\\magpie-base\\src\\components\\screens\\EyetrackingCalibrationScreen.vue","mtime":1656594654759},{"path":"C:\\thesis\\magpie-exp\\node_modules\\css-loader\\dist\\cjs.js","mtime":1651676242449},{"path":"C:\\thesis\\magpie-exp\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1651676244489},{"path":"C:\\thesis\\magpie-exp\\node_modules\\postcss-loader\\src\\index.js","mtime":1651676243373},{"path":"C:\\thesis\\magpie-exp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1651676241754},{"path":"C:\\thesis\\magpie-exp\\node_modules\\vue-loader\\lib\\index.js","mtime":1651676243816}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLnBvaW50IHsKICBwb3NpdGlvbjogYWJzb2x1dGU7Cn0KCi5wb2ludC5jaGVjayB7CiAgcG9zaXRpb246IGZpeGVkOwogIGxlZnQ6IDUwdnc7CiAgdG9wOiA0MHZoOwp9Cg=="},{"version":3,"sources":["EyetrackingCalibrationScreen.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiIA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"EyetrackingCalibrationScreen.vue","sourceRoot":"node_modules/magpie-base/src/components/screens","sourcesContent":["<docs>\nThis screen is used to initialize and calibrate eye tracking.\nEyetracking requires that you install `webgazer`.\n\n```vue\n<Experiment wide>\n  <InstructionScreen>\n    Click the button to start full screen.\n  </InstructionScreen>\n\n  <InstructionScreen>\n    <FullScreenStart />\n    Click the button to start calibration.\n  </InstructionScreen>\n\n  <!-- We'll set debugging to true so you can see something -->\n  <EyetrackingCalibrationScreen debug />\n\n  <InstructionScreen>\n    Successfully calibrated!\n  </InstructionScreen>\n\n</Experiment>\n```\n</docs>\n\n<template>\n  <Screen v-bind=\"{ ...$attrs, ...$props }\">\n    <Slide>\n      <Wait key=\"start\" :time=\"0\" @done=\"onStart\" />\n      <p>{{ $t('screens.EyetrackingCalibrationScreen.start') }}</p>\n    </Slide>\n    <Slide>\n      <Wait key=\"calibration\" :time=\"0\" @done=\"runCalibration\" />\n      <p>{{ $t('screens.EyetrackingCalibrationScreen.instruction') }}</p>\n      <CanvasStage\n        :config=\"{ width: 26, height: 26 }\"\n        :style=\"{ left: x + 'px', top: y + 'px' }\"\n        class=\"point\"\n        @click=\"nextPoint\"\n      >\n        <CanvasLayer>\n          <CanvasCircle\n            :config=\"{\n              x: 13,\n              y: 13,\n              fill: 'red',\n              radius: 12,\n              stroke: 'black',\n              strokeWidth: 1\n            }\"\n          ></CanvasCircle>\n        </CanvasLayer>\n      </CanvasStage>\n    </Slide>\n    <Slide>\n      <p>{{ $t('screens.EyetrackingCalibrationScreen.error') }}</p>\n    </Slide>\n  </Screen>\n</template>\n\n<script>\nimport flatten from 'lodash/flatten';\nimport times from 'lodash/times';\nimport shuffle from 'lodash/shuffle';\nimport Screen from '../Screen';\nimport Slide from '../Slide';\nexport default {\n  name: 'EyetrackingCalibrationScreen',\n  components: { Slide, Screen },\n  props: {\n    debug: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      x: 0,\n      y: 0,\n      calibrationSequence: []\n    };\n  },\n  methods: {\n    nextPoint() {\n      const next = this.calibrationSequence.pop();\n      if (next) {\n        Object.assign(this, next);\n      } else {\n        this.$magpie.eyetracking.setDeaf(false);\n        this.$magpie.nextScreen();\n      }\n    },\n    async onStart() {\n      this.$magpie.eyetracking.setDeaf(true);\n      try {\n        // initialize eyetracking\n        await this.$magpie.eyetracking.initialize();\n        this.$magpie.eyetracking.setDebug(this.debug);\n        this.$magpie.nextSlide();\n      } catch (e) {\n        console.error(e);\n        this.$magpie.nextSlide(2);\n      }\n    },\n    runCalibration() {\n      // create\n      const exp = this.$magpie.experiment.$el.getBoundingClientRect();\n      [0, exp.height * 0.25, exp.height / 2, exp.height * 0.75].forEach((y) => {\n        [\n          0,\n          exp.width * 0.25,\n          exp.width / 2,\n          exp.width * 0.75,\n          exp.width\n        ].forEach((x) => {\n          this.calibrationSequence.push({ x, y });\n        });\n      });\n      this.calibrationSequence = flatten(\n        times(2, () => shuffle(this.calibrationSequence))\n      );\n      this.nextPoint();\n    }\n  }\n};\n</script>\n\n<style scoped>\n.point {\n  position: absolute;\n}\n\n.point.check {\n  position: fixed;\n  left: 50vw;\n  top: 40vh;\n}\n</style>\n"]}]}